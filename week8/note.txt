第八周


第16课位运算
第17课布隆过滤器和LRU缓存
第18课排序算法https://www.cnblogs.com/onepixel/p/7674659.html

为运算符
算数位移与逻辑位移
位运算的应用

指定位置的为运算
1. 将 x 最右边的 n 位清零：x & (~0 << n)
2. 获取 x 的第 n 位值（0 或者 1）： (x >> n) & 1
3. 获取 x 的第 n 位的幂值：x & (1 << n)
4. 仅将第 n 位置为 1：x | (1 << n)
5. 仅将第 n 位置为 0：x & (~ (1 << n))
6. 将 x 最高位至第 n 位（含）清零：x & ((1 << n) - 1)

判断奇偶：
x % 2 == 1 —> (x & 1) == 1
x % 2 == 0 —> (x & 1) == 0
• x >> 1 —> x / 2.
即： x = x / 2; —> x = x >> 1;
mid = (left + right) / 2; —> mid = (left + right) >> 1;
• X = X & (X-1) 清零最低位的 1
• X & -X => 得到最低位的 1
• X & ~X => 0




// n皇后位运算解法
class Solution {
	private int size;
	private int count;
	private void solve(int row, int ld, int rd) {
		if (row == size) {
			count++;
			return;
		}
		int pos = size & (~(row | ld | rd));
		while (pos != 0) {
			int p = pos & (-pos);
			pos -= p; // pos &= pos - 1;
			solve(row | p, (ld | p) << 1, (rd | p) >> 1);
		}
	}
public int totalNQueens(int n) {
	count = 0;
	size = (1 << n) - 1;
	solve(0, 0, 0);
	return count;
  }
}


bloom filter VS hash table

一个很长的二进制向量和一系列随机映射函数，布隆过滤器可以用于检索一个元素是否在一个集合中

优点是空间效率和查询时间都远远超过一般的算法
缺点是有一定的误识别率和删除困难



排序算法
比较类排序
交换排序[冒泡排序 快速排序]
插入排序[简单插入排序 希尔排序]
选择排序[简单选择排序 堆排序]
归并排序[二路归并排序 多路归并排序]

非比较类排序
计数排序 桶排序 基数排序

冒泡排序
public int[] bubbleSort(int[]arr){
    for(int i= 0;i<arr.length-1;i++){
        for(int j = 0;j<arr.length-i-1;j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j+1];
                arr[j+1] = arr[j];
                arr[j]=temp;
            }
        }
    }
    return arr;
}

插入排序
public int[] insertSort(int[] arr){

    for(int i = 1;i < arr.length;i++){
        for(int j=i;j>0;j--){
            if(arr[j]<arr[j-1]){
                int temp = arr[j-1];
                arr[j-1] = arr[j];
                arr[j] = temp;
            }
        }
    }
    return arr;
}
选择排序
public int[] SelectionSort(int[] arr){
		int min_index;
		for(int i=0;i<arr.length-1;i++){
			min_index=i;
			for(int j=i+1;j<arr.length;j++){
				if(arr[j]<arr[min_index]){
					min_index=j;
				}
			}
			if(i!=min_index){
				int temp = arr[i];
				arr[i]=arr[min_index];
				arr[min_index]=temp;
			}
		}
		return arr;
}


三个O(nlogn)
堆排序 快速排序 归并排序


初级排序
1选择排序selection sort
每次找最小值，然后放到待排序数组的起始位置

2插入排序 insertion sort
从前到后逐步构建有序序列 对于未排序数据，在已排序序列中从后向前扫描
找到相应位置并插入

3冒泡排序
嵌套循环，每次查看相邻元素如果逆序，则交换

高级排序nlogn
1快速排序
数组取标杆pivot，将小元素放pivot左边 大元素放右边
然后依次对右边和右边的子数组继续快排 以达到整个序列有序

2归并排序
1 把长度为n的输入序列分成两个长度为n/2的子序列
2对这两个子序列分别采用归并排序
3将两个排序好的子序列合并成一个最终的排序序列

归并和快排具有相似性，但步骤顺序相反

归并：先排序左右子数组，然后合并两个有序子数组
快排：先调配出左右子数组，然后对于左右子数组进行排序

3堆排序heap sort
堆插入O(logN) 取最大、最小值O(1)
1数组元素依次建立小顶堆
2依次取堆顶元素，并删除

特殊排序O(n)
计数排序（Counting Sort）
计数排序要求输入的数据必须是有确定范围的整数。将输入的数据值转化为键存
储在额外开辟的数组空间中；然后依次把计数大于 1 的填充回原数组
• 桶排序（Bucket Sort）
桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到
有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方
式继续使用桶排序进行排）。
• 基数排序（Radix Sort）
基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类
推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按
高优先级排序。


//用自己熟悉的编程语言，手写各种初级排序代码
